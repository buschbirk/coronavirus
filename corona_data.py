# -*- coding: utf-8 -*-
"""
Created on Sun Mar 29 15:10:09 2020

@author: lasse
"""


import pandas as pd
from datetime import datetime as dt
import os


def merge_dict(main_df, merge_df, colname):
    """
    creates a new column in main_df with values merged from date + country in merge_df

    Parameters
    ----------
    main_df : DataFrame
        DataFrame on which to left-join data.
    merge_df : DataFrame
        DataFrame from which to join data.
    colname : string
        name of new column in main_df.

    Returns
    -------
    main_df : DataFrame
        DataFrame with new column added.
    """
    # copy merge df and set country as index
    merge_copy = merge_df.copy()
    merge_copy.index = merge_copy['Row Labels']
    
    # convert df to dict with structure like {column -> {index -> value}}
    merge_copy_dict = merge_copy.to_dict('dict')
    
    # apply values to main_df row-wise using dict lookup
    main_df[colname] = main_df.apply(lambda row: float(merge_copy_dict[row.date][row.country]), axis=1)
    
    return main_df


    
def create_all_stats_table(filename, date_folder):
    """
    Creates table with value for each infection and death-related metric
    for each date and country. Used for Flourish Rosling charts

    Parameters
    ----------
    filename : string
        filapath of Excel file with master data.

    Returns
    -------
    all_stats_df : DataFrame
        DataFrame with metrics on country-date row-wise basis.
    """
    
    # read all sheets into pandas dataframes
    dfs = pd.read_excel(filename, sheet_name=None, dtype="str")
    
    # create a row for each country-date pair 
    keys = []
    for date in dfs['all_dates'].date.values:
        for country in dfs['all_countries'].Country.values:
            keys.append([country, date])

    # initialize df with country and date columns
    all_stats_df = pd.DataFrame(keys, columns=['country', 'date'])
    
    # merge infection and death records to all_stats_df
    all_stats_df = merge_dict(all_stats_df, dfs['infections_pivot'], 'infections') # infection count
    all_stats_df = merge_dict(all_stats_df, dfs['infections_new_pivot'], 'infections_new') # new daily infections
    # Daily infection increase (mean of prev. 5 days):
    all_stats_df = merge_dict(all_stats_df, dfs['infections_new_normed_pivot'], 'infections_new_normed') 
    
    # total deaths and daily deaths increase
    all_stats_df = merge_dict(all_stats_df, dfs['deaths_pivot'], 'deaths')
    all_stats_df = merge_dict(all_stats_df, dfs['deaths_new_pivot'], 'deaths_new')
    
    # compute mortality rate as total number of deaths per infection
    all_stats_df['deaths_per_infection'] = all_stats_df['deaths'] / all_stats_df['infections']
    
    # compute death increase divided by infection increase
    all_stats_df['deaths_per_infection_new'] = all_stats_df['deaths_new'] / all_stats_df['infections_new']
    
    # compute Python datetime column
    all_stats_df['datetime'] = all_stats_df.apply(lambda x: dt.strptime(x.date, ' %m/%d/%Y'), axis=1) 
    
    
    continents = pd.read_csv('country-continent.csv')
    all_stats_df = all_stats_df.merge(continents[['country', 'continent']], on="country", how='left')
    
    # export results to csv
    all_stats_df.to_csv('{}/all_stats_corona_{}.csv'
                        .format(date_folder, dt.today().strftime('%Y-%m-%d')), index=False)
    
    return all_stats_df


def count_from_first_n_report(all_stats_df, date_folder, 
                              first_label='infections', n=50):
    """
    Creates a dataset of each infection and death metric by day
    counting from the first day each country observed min <n> cases of <first_label>
    e.g. first 50 infections. Saves all results to csv

    Parameters
    ----------
    all_stats_df : DataFrame
        df generated by create_all_stats_table().
    date_folder : string
        foldername.
    first_label : string, optional
        column name of metric to match against. The default is 'infections'.
    n : int, optional
        minimum number of cases to start count. The default is 50.
    """
    
    # sort all values by time ascending
    all_stats_df.sort_values(by='datetime', inplace=True)
    
    # initialize lists to store records
    infections = []
    infections_new = []
    infections_new_normed = []
    deaths = []
    deaths_new = []
    
    # loop over each country in dataset
    for country in all_stats_df['country'].unique():
        
        # filter data belning to current country
        filtered = all_stats_df[all_stats_df.country == country]
        filtered.reset_index(False, inplace=True)
        
        # find index of first record which has at least value n
        try:
            index =  (filtered[first_label] >= n).values.tolist().index(True)
        # if no index is found, no records have at least value n
        except ValueError:
            continue
        
        # slice data at index
        filtered = filtered[index:]
        
        # initialize country records
        infections_country = {'country': country}  
        infections_new_country = {'country': country}  
        infections_new_normed_country = {'country': country}  
        deaths_country = {'country': country}  
        deaths_new_country = {'country': country}  
        
        # append records from each day to country record
        for idx, record in enumerate(filtered.to_dict('records')):    
            
            colname = 'Day {}'.format(idx + 1)
            
            infections_country[colname] = record['infections']
            infections_new_country[colname] = record['infections_new']
            infections_new_normed_country[colname] = record['infections_new_normed']
            deaths_country[colname] = record['deaths']
            deaths_new_country[colname] = record['deaths_new']
        
        # append country records to total records
        infections.append(infections_country)
        infections_new.append(infections_new_country)
        infections_new_normed.append(infections_new_normed_country)
        deaths.append(deaths_country)
        deaths_new.append(deaths_new_country)
        
    continents = pd.read_csv('country-continent.csv')
            
    # store from_records() method in variable
    from_records = lambda recs: pd.DataFrame.from_records(recs)\
                   .merge(continents[['country', 'continent']], on="country", how='left')
        
    # load all records into pandas and write directly to CSV file
    from_records(infections).to_csv('{}/infections_from_first_{}_{}.csv'
                                    .format(date_folder, n, first_label), index=False)
    
    from_records(infections_new).to_csv('{}/new_infections_from_first_{}_{}.csv'
                                        .format(date_folder, n, first_label), index=False)
    
    from_records(infections_new).to_csv('{}/new_infections_normed_from_first_{}_{}.csv'
                                        .format(date_folder, n, first_label), index=False)
    
    from_records(deaths).to_csv('{}/deaths_from_first_{}_{}.csv'
                                .format(date_folder, n, first_label), index=False)
    
    from_records(deaths_new).to_csv('{}/new_deaths_from_first_{}_{}.csv'
                                    .format(date_folder, n, first_label), index=False)
            
    return
        


if __name__ == '__main__':
    
    # ensure that date_folder exists for current date
    date_folder = dt.today().strftime('%Y%m%d')
    if not os.path.exists(date_folder):
        os.mkdir(date_folder)
    
    # get all_stats_df from master Excel-workbook 
    all_stats_df = create_all_stats_table('CoronavirusTrendsMaster.xlsx', date_folder)
    
    # get day-by-day records from first 50 infections
    count_from_first_n_report(all_stats_df, date_folder, first_label='infections', n=50)
    
    # get day-by-day records from first 5 deaths
    count_from_first_n_report(all_stats_df, date_folder, first_label='deaths', n=5)

    
    # https://ourworldindata.org/world-region-map-definitions
    continents = pd.read_csv('country-continent.csv')
    
    df = all_stats_df.merge(continents[['country', 'continent']], on="country", how='left')












